// AUTOGENERATED - DO NOT EDIT
// Generated by go-windows.

// Package iscsidisc implements the Windows.Win32.IScsiDisc namespace.
package iscsidisc

type SCSI_PASS_THROUGH struct {
	Length             int
	ScsiStatus         int
	PathId             int
	TargetId           int
	Lun                int
	CdbLength          int
	SenseInfoLength    int
	DataIn             int
	DataTransferLength int
	TimeOutValue       int
	DataBufferOffset   int
	SenseInfoOffset    int
	Cdb                int
}

type SCSI_PASS_THROUGH_DIRECT struct {
	Length             int
	ScsiStatus         int
	PathId             int
	TargetId           int
	Lun                int
	CdbLength          int
	SenseInfoLength    int
	DataIn             int
	DataTransferLength int
	TimeOutValue       int
	DataBuffer         int
	SenseInfoOffset    int
	Cdb                int
}

type SCSI_PASS_THROUGH_EX struct {
	Version               int
	Length                int
	CdbLength             int
	StorAddressLength     int
	ScsiStatus            int
	SenseInfoLength       int
	DataDirection         int
	Reserved              int
	TimeOutValue          int
	StorAddressOffset     int
	SenseInfoOffset       int
	DataOutTransferLength int
	DataInTransferLength  int
	DataOutBufferOffset   int
	DataInBufferOffset    int
	Cdb                   int
}

type SCSI_PASS_THROUGH_DIRECT_EX struct {
	Version               int
	Length                int
	CdbLength             int
	StorAddressLength     int
	ScsiStatus            int
	SenseInfoLength       int
	DataDirection         int
	Reserved              int
	TimeOutValue          int
	StorAddressOffset     int
	SenseInfoOffset       int
	DataOutTransferLength int
	DataInTransferLength  int
	DataOutBuffer         int
	DataInBuffer          int
	Cdb                   int
}

type ATA_PASS_THROUGH_EX struct {
	Length             int
	AtaFlags           int
	PathId             int
	TargetId           int
	Lun                int
	ReservedAsUchar    int
	DataTransferLength int
	TimeOutValue       int
	ReservedAsUlong    int
	DataBufferOffset   int
	PreviousTaskFile   int
	CurrentTaskFile    int
}

type ATA_PASS_THROUGH_DIRECT struct {
	Length             int
	AtaFlags           int
	PathId             int
	TargetId           int
	Lun                int
	ReservedAsUchar    int
	DataTransferLength int
	TimeOutValue       int
	ReservedAsUlong    int
	DataBuffer         int
	PreviousTaskFile   int
	CurrentTaskFile    int
}

type IDE_IO_CONTROL struct {
	HeaderLength int
	Signature    int
	Timeout      int
	ControlCode  int
	ReturnStatus int
	DataLength   int
}

type MPIO_PASS_THROUGH_PATH struct {
	PassThrough int
	Version     int
	Length      int
	Flags       int
	PortNumber  int
	MpioPathId  int
}

type MPIO_PASS_THROUGH_PATH_DIRECT struct {
	PassThrough int
	Version     int
	Length      int
	Flags       int
	PortNumber  int
	MpioPathId  int
}

type MPIO_PASS_THROUGH_PATH_EX struct {
	PassThroughOffset int
	Version           int
	Length            int
	Flags             int
	PortNumber        int
	MpioPathId        int
}

type MPIO_PASS_THROUGH_PATH_DIRECT_EX struct {
	PassThroughOffset int
	Version           int
	Length            int
	Flags             int
	PortNumber        int
	MpioPathId        int
}

type SCSI_BUS_DATA struct {
	NumberOfLogicalUnits int
	InitiatorBusId       int
	InquiryDataOffset    int
}

type SCSI_ADAPTER_BUS_INFO struct {
	NumberOfBuses int
	BusData       int
}

type SCSI_INQUIRY_DATA struct {
	PathId                int
	TargetId              int
	Lun                   int
	DeviceClaimed         int
	InquiryDataLength     int
	NextInquiryDataOffset int
	InquiryData           int
}

type SRB_IO_CONTROL struct {
	HeaderLength int
	Signature    int
	Timeout      int
	ControlCode  int
	ReturnCode   int
	Length       int
}

type NVCACHE_REQUEST_BLOCK struct {
	NRBSize          int
	Function         int
	NRBFlags         int
	NRBStatus        int
	Count            int
	LBA              int
	DataBufSize      int
	NVCacheStatus    int
	NVCacheSubStatus int
}

type NV_FEATURE_PARAMETER struct {
	NVPowerModeEnabled int
	NVParameterReserv1 int
	NVCmdEnabled       int
	NVParameterReserv2 int
	NVPowerModeVer     int
	NVCmdVer           int
	NVSize             int
	NVReadSpeed        int
	NVWrtSpeed         int
	DeviceSpinUpTime   int
}

type NVCACHE_HINT_PAYLOAD struct {
	Command        int
	Feature7_0     int
	Feature15_8    int
	Count15_8      int
	LBA7_0         int
	LBA15_8        int
	LBA23_16       int
	LBA31_24       int
	LBA39_32       int
	LBA47_40       int
	Auxiliary7_0   int
	Auxiliary23_16 int
	Reserved       int
}

type NV_SEP_CACHE_PARAMETER struct {
	Version                 int
	Size                    int
	Flags                   int
	WriteCacheType          int
	WriteCacheTypeEffective int
	ParameterReserve1       int
}

type STORAGE_DIAGNOSTIC_MP_REQUEST struct {
	Version    int
	Size       int
	TargetType int
	Level      int
	ProviderId int
	BufferSize int
	Reserved   int
	DataBuffer int
}

type MP_DEVICE_DATA_SET_RANGE struct {
	StartingOffset int
	LengthInBytes  int
}

type DSM_NOTIFICATION_REQUEST_BLOCK struct {
	Size               int
	Version            int
	NotifyFlags        int
	DataSetProfile     int
	Reserved           int
	DataSetRangesCount int
	DataSetRanges      int
}

type HYBRID_REQUEST_BLOCK struct {
	Version          int
	Size             int
	Function         int
	Flags            int
	DataBufferOffset int
	DataBufferLength int
}

type NVCACHE_PRIORITY_LEVEL_DESCRIPTOR struct {
	PriorityLevel                                int
	Reserved0                                    int
	ConsumedNVMSizeFraction                      int
	ConsumedMappingResourcesFraction             int
	ConsumedNVMSizeForDirtyDataFraction          int
	ConsumedMappingResourcesForDirtyDataFraction int
	Reserved1                                    int
}

type HYBRID_INFORMATION struct {
	Version            int
	Size               int
	HybridSupported    int
	Status             int
	CacheTypeEffective int
	CacheTypeDefault   int
	FractionBase       int
	CacheSize          int
	Attributes         int
	Priorities         int
}

type HYBRID_DIRTY_THRESHOLDS struct {
	Version            int
	Size               int
	DirtyLowThreshold  int
	DirtyHighThreshold int
}

type HYBRID_DEMOTE_BY_SIZE struct {
	Version        int
	Size           int
	SourcePriority int
	TargetPriority int
	Reserved0      int
	Reserved1      int
	LbaCount       int
}

type FIRMWARE_REQUEST_BLOCK struct {
	Version          int
	Size             int
	Function         int
	Flags            int
	DataBufferOffset int
	DataBufferLength int
}

type STORAGE_FIRMWARE_SLOT_INFO struct {
	SlotNumber int
	ReadOnly   int
	Reserved   int
	Revision   int
}

type STORAGE_FIRMWARE_SLOT_INFO_V2 struct {
	SlotNumber int
	ReadOnly   int
	Reserved   int
	Revision   int
}

type STORAGE_FIRMWARE_INFO struct {
	Version             int
	Size                int
	UpgradeSupport      int
	SlotCount           int
	ActiveSlot          int
	PendingActivateSlot int
	Reserved            int
	Slot                int
}

type STORAGE_FIRMWARE_INFO_V2 struct {
	Version               int
	Size                  int
	UpgradeSupport        int
	SlotCount             int
	ActiveSlot            int
	PendingActivateSlot   int
	FirmwareShared        int
	Reserved              int
	ImagePayloadAlignment int
	ImagePayloadMaxSize   int
	Slot                  int
}

type STORAGE_FIRMWARE_DOWNLOAD struct {
	Version     int
	Size        int
	Offset      int
	BufferSize  int
	ImageBuffer int
}

type STORAGE_FIRMWARE_DOWNLOAD_V2 struct {
	Version     int
	Size        int
	Offset      int
	BufferSize  int
	Slot        int
	Reserved    int
	ImageSize   int
	ImageBuffer int
}

type STORAGE_FIRMWARE_ACTIVATE struct {
	Version        int
	Size           int
	SlotToActivate int
	Reserved0      int
}

type IO_SCSI_CAPABILITIES struct {
	Length                      int
	MaximumTransferLength       int
	MaximumPhysicalPages        int
	SupportedAsynchronousEvents int
	AlignmentMask               int
	TaggedQueuing               int
	AdapterScansDown            int
	AdapterUsesPio              int
}

type SCSI_ADDRESS struct {
	Length     int
	PortNumber int
	PathId     int
	TargetId   int
	Lun        int
}

type ADAPTER_OBJECT struct {
}

type DUMP_POINTERS_VERSION struct {
	Version int
	Size    int
}

type DUMP_POINTERS struct {
	AdapterObject         int
	MappedRegisterBase    int
	DumpData              int
	CommonBufferVa        int
	CommonBufferPa        int
	CommonBufferSize      int
	AllocateCommonBuffers int
	UseDiskDump           int
	Spare1                int
	DeviceObject          int
}

type DUMP_POINTERS_EX struct {
	Header                   int
	DumpData                 int
	CommonBufferVa           int
	CommonBufferSize         int
	AllocateCommonBuffers    int
	DeviceObject             int
	DriverList               int
	DWPORTFLAGS              int
	MaxDeviceDumpSectionSize int
	MaxDeviceDumpLevel       int
	MaxTransferSize          int
	AdapterObject            int
	MappedRegisterBase       int
	DeviceReady              int
	DumpDevicePowerOn        int
	DumpDevicePowerOnContext int
}

type DUMP_DRIVER struct {
	DumpDriverList int
	DriverName     int
	BaseName       int
}

type NTSCSI_UNICODE_STRING struct {
	Length        int
	MaximumLength int
	Buffer        int
}

type DUMP_DRIVER_EX struct {
	DumpDriverList int
	DriverName     int
	BaseName       int
	DriverFullPath int
}

type STORAGE_ENDURANCE_INFO struct {
	ValidFields    int
	GroupId        int
	Flags          int
	LifePercentage int
	BytesReadCount int
	ByteWriteCount int
}

type STORAGE_ENDURANCE_DATA_DESCRIPTOR struct {
	Version       int
	Size          int
	EnduranceInfo int
}

type ISCSI_LOGIN_OPTIONS struct {
	Version              int
	InformationSpecified int
	LoginFlags           int
	AuthType             int
	HeaderDigest         int
	DataDigest           int
	MaximumConnections   int
	DefaultTime2Wait     int
	DefaultTime2Retain   int
	UsernameLength       int
	PasswordLength       int
	Username             int
	Password             int
}

type IKE_AUTHENTICATION_PRESHARED_KEY struct {
	SecurityFlags    int
	IdType           int
	IdLengthInBytes  int
	Id               int
	KeyLengthInBytes int
	Key              int
}

type IKE_AUTHENTICATION_INFORMATION struct {
	AuthMethod int
	Anonymous  int
}

type ISCSI_UNIQUE_SESSION_ID struct {
	AdapterUnique   int
	AdapterSpecific int
}

type SCSI_LUN_LIST struct {
	OSLUN     int
	TargetLUN int
}

type ISCSI_TARGET_MAPPINGW struct {
	InitiatorName  int
	TargetName     int
	OSDeviceName   int
	SessionId      int
	OSBusNumber    int
	OSTargetNumber int
	LUNCount       int
	LUNList        int
}

type ISCSI_TARGET_MAPPINGA struct {
	InitiatorName  int
	TargetName     int
	OSDeviceName   int
	SessionId      int
	OSBusNumber    int
	OSTargetNumber int
	LUNCount       int
	LUNList        int
}

type ISCSI_TARGET_PORTALW struct {
	SymbolicName int
	Address      int
	Socket       int
}

type ISCSI_TARGET_PORTALA struct {
	SymbolicName int
	Address      int
	Socket       int
}

type ISCSI_TARGET_PORTAL_INFOW struct {
	InitiatorName       int
	InitiatorPortNumber int
	SymbolicName        int
	Address             int
	Socket              int
}

type ISCSI_TARGET_PORTAL_INFOA struct {
	InitiatorName       int
	InitiatorPortNumber int
	SymbolicName        int
	Address             int
	Socket              int
}

type ISCSI_TARGET_PORTAL_INFO_EXW struct {
	InitiatorName       int
	InitiatorPortNumber int
	SymbolicName        int
	Address             int
	Socket              int
	SecurityFlags       int
	LoginOptions        int
}

type ISCSI_TARGET_PORTAL_INFO_EXA struct {
	InitiatorName       int
	InitiatorPortNumber int
	SymbolicName        int
	Address             int
	Socket              int
	SecurityFlags       int
	LoginOptions        int
}

type ISCSI_TARGET_PORTAL_GROUPW struct {
	Count   int
	Portals int
}

type ISCSI_TARGET_PORTAL_GROUPA struct {
	Count   int
	Portals int
}

type ISCSI_CONNECTION_INFOW struct {
	ConnectionId     int
	InitiatorAddress int
	TargetAddress    int
	InitiatorSocket  int
	TargetSocket     int
	CID              int
}

type ISCSI_SESSION_INFOW struct {
	SessionId       int
	InitiatorName   int
	TargetNodeName  int
	TargetName      int
	ISID            int
	TSID            int
	ConnectionCount int
	Connections     int
}

type ISCSI_CONNECTION_INFOA struct {
	ConnectionId     int
	InitiatorAddress int
	TargetAddress    int
	InitiatorSocket  int
	TargetSocket     int
	CID              int
}

type ISCSI_SESSION_INFOA struct {
	SessionId       int
	InitiatorName   int
	TargetNodeName  int
	TargetName      int
	ISID            int
	TSID            int
	ConnectionCount int
	Connections     int
}

type ISCSI_CONNECTION_INFO_EX struct {
	ConnectionId             int
	State                    int
	Protocol                 int
	HeaderDigest             int
	DataDigest               int
	MaxRecvDataSegmentLength int
	AuthType                 int
	EstimatedThroughput      int
	MaxDatagramSize          int
}

type ISCSI_SESSION_INFO_EX struct {
	SessionId           int
	InitialR2t          int
	ImmediateData       int
	Type                int
	DataSequenceInOrder int
	DataPduInOrder      int
	ErrorRecoveryLevel  int
	MaxOutstandingR2t   int
	FirstBurstLength    int
	MaxBurstLength      int
	MaximumConnections  int
	ConnectionCount     int
	Connections         int
}

type ISCSI_DEVICE_ON_SESSIONW struct {
	InitiatorName       int
	TargetName          int
	ScsiAddress         int
	DeviceInterfaceType int
	DeviceInterfaceName int
	LegacyName          int
	StorageDeviceNumber int
	DeviceInstance      int
}

type ISCSI_DEVICE_ON_SESSIONA struct {
	InitiatorName       int
	TargetName          int
	ScsiAddress         int
	DeviceInterfaceType int
	DeviceInterfaceName int
	LegacyName          int
	StorageDeviceNumber int
	DeviceInstance      int
}

type PERSISTENT_ISCSI_LOGIN_INFOW struct {
	TargetName             int
	IsInformationalSession int
	InitiatorInstance      int
	InitiatorPortNumber    int
	TargetPortal           int
	SecurityFlags          int
	Mappings               int
	LoginOptions           int
}

type PERSISTENT_ISCSI_LOGIN_INFOA struct {
	TargetName             int
	IsInformationalSession int
	InitiatorInstance      int
	InitiatorPortNumber    int
	TargetPortal           int
	SecurityFlags          int
	Mappings               int
	LoginOptions           int
}

type ISCSI_VERSION_INFO struct {
	MajorVersion int
	MinorVersion int
	BuildNumber  int
}
